package com.mico.model.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mico.model.po.ChatMessagePO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_MESSAGE_PO.
*/
public class ChatMessagePODao extends AbstractDao<ChatMessagePO, String> {

    public static final String TABLENAME = "CHAT_MESSAGE_PO";

    /**
     * Properties of entity ChatMessagePO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MsgId = new Property(0, String.class, "msgId", true, "MSG_ID");
        public final static Property ConvId = new Property(1, long.class, "convId", false, "CONV_ID");
        public final static Property Uid = new Property(2, long.class, "uid", false, "UID");
        public final static Property Direction = new Property(3, int.class, "direction", false, "DIRECTION");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Ctime = new Property(6, long.class, "ctime", false, "CTIME");
        public final static Property Ext = new Property(7, String.class, "ext", false, "EXT");
    };


    public ChatMessagePODao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessagePODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_MESSAGE_PO' (" + //
                "'MSG_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: msgId
                "'CONV_ID' INTEGER NOT NULL ," + // 1: convId
                "'UID' INTEGER NOT NULL ," + // 2: uid
                "'DIRECTION' INTEGER NOT NULL ," + // 3: direction
                "'TYPE' INTEGER," + // 4: type
                "'STATUS' INTEGER," + // 5: status
                "'CTIME' INTEGER NOT NULL ," + // 6: ctime
                "'EXT' TEXT);"); // 7: ext
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHAT_MESSAGE_PO_MSG_ID ON CHAT_MESSAGE_PO" +
                " (MSG_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHAT_MESSAGE_PO_CONV_ID ON CHAT_MESSAGE_PO" +
                " (CONV_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHAT_MESSAGE_PO_UID ON CHAT_MESSAGE_PO" +
                " (UID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHAT_MESSAGE_PO_CTIME ON CHAT_MESSAGE_PO" +
                " (CTIME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_MESSAGE_PO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMessagePO entity) {
        stmt.clearBindings();
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(1, msgId);
        }
        stmt.bindLong(2, entity.getConvId());
        stmt.bindLong(3, entity.getUid());
        stmt.bindLong(4, entity.getDirection());
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
        stmt.bindLong(7, entity.getCtime());
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(8, ext);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMessagePO readEntity(Cursor cursor, int offset) {
        ChatMessagePO entity = new ChatMessagePO( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // msgId
            cursor.getLong(offset + 1), // convId
            cursor.getLong(offset + 2), // uid
            cursor.getInt(offset + 3), // direction
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.getLong(offset + 6), // ctime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // ext
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMessagePO entity, int offset) {
        entity.setMsgId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setConvId(cursor.getLong(offset + 1));
        entity.setUid(cursor.getLong(offset + 2));
        entity.setDirection(cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCtime(cursor.getLong(offset + 6));
        entity.setExt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ChatMessagePO entity, long rowId) {
        return entity.getMsgId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ChatMessagePO entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
