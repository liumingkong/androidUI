package com.mico.model.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mico.model.po.ConversationPO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONVERSATION_PO.
*/
public class ConversationPODao extends AbstractDao<ConversationPO, Long> {

    public static final String TABLENAME = "CONVERSATION_PO";

    /**
     * Properties of entity ConversationPO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ConvId = new Property(0, Long.class, "convId", true, "CONV_ID");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property LastMessageId = new Property(2, String.class, "lastMessageId", false, "LAST_MESSAGE_ID");
        public final static Property LastUpdateTime = new Property(3, long.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property LastUpdateMessage = new Property(4, String.class, "lastUpdateMessage", false, "LAST_UPDATE_MESSAGE");
        public final static Property UnreadCount = new Property(5, Integer.class, "unreadCount", false, "UNREAD_COUNT");
        public final static Property LastUpdateStatus = new Property(6, Integer.class, "lastUpdateStatus", false, "LAST_UPDATE_STATUS");
        public final static Property ConvSetting = new Property(7, String.class, "convSetting", false, "CONV_SETTING");
        public final static Property Ext = new Property(8, String.class, "ext", false, "EXT");
    };


    public ConversationPODao(DaoConfig config) {
        super(config);
    }
    
    public ConversationPODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONVERSATION_PO' (" + //
                "'CONV_ID' INTEGER PRIMARY KEY ," + // 0: convId
                "'TYPE' INTEGER NOT NULL ," + // 1: type
                "'LAST_MESSAGE_ID' TEXT," + // 2: lastMessageId
                "'LAST_UPDATE_TIME' INTEGER NOT NULL ," + // 3: lastUpdateTime
                "'LAST_UPDATE_MESSAGE' TEXT," + // 4: lastUpdateMessage
                "'UNREAD_COUNT' INTEGER," + // 5: unreadCount
                "'LAST_UPDATE_STATUS' INTEGER," + // 6: lastUpdateStatus
                "'CONV_SETTING' TEXT," + // 7: convSetting
                "'EXT' TEXT);"); // 8: ext
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CONVERSATION_PO_CONV_ID ON CONVERSATION_PO" +
                " (CONV_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CONVERSATION_PO_TYPE ON CONVERSATION_PO" +
                " (TYPE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CONVERSATION_PO_LAST_UPDATE_TIME ON CONVERSATION_PO" +
                " (LAST_UPDATE_TIME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONVERSATION_PO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ConversationPO entity) {
        stmt.clearBindings();
 
        Long convId = entity.getConvId();
        if (convId != null) {
            stmt.bindLong(1, convId);
        }
        stmt.bindLong(2, entity.getType());
 
        String lastMessageId = entity.getLastMessageId();
        if (lastMessageId != null) {
            stmt.bindString(3, lastMessageId);
        }
        stmt.bindLong(4, entity.getLastUpdateTime());
 
        String lastUpdateMessage = entity.getLastUpdateMessage();
        if (lastUpdateMessage != null) {
            stmt.bindString(5, lastUpdateMessage);
        }
 
        Integer unreadCount = entity.getUnreadCount();
        if (unreadCount != null) {
            stmt.bindLong(6, unreadCount);
        }
 
        Integer lastUpdateStatus = entity.getLastUpdateStatus();
        if (lastUpdateStatus != null) {
            stmt.bindLong(7, lastUpdateStatus);
        }
 
        String convSetting = entity.getConvSetting();
        if (convSetting != null) {
            stmt.bindString(8, convSetting);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(9, ext);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ConversationPO readEntity(Cursor cursor, int offset) {
        ConversationPO entity = new ConversationPO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // convId
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastMessageId
            cursor.getLong(offset + 3), // lastUpdateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lastUpdateMessage
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // unreadCount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // lastUpdateStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // convSetting
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // ext
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ConversationPO entity, int offset) {
        entity.setConvId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setLastMessageId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastUpdateTime(cursor.getLong(offset + 3));
        entity.setLastUpdateMessage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnreadCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLastUpdateStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setConvSetting(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExt(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ConversationPO entity, long rowId) {
        entity.setConvId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ConversationPO entity) {
        if(entity != null) {
            return entity.getConvId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
