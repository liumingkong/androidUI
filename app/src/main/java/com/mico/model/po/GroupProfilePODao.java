package com.mico.model.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mico.model.po.GroupProfilePO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GROUP_PROFILE_PO.
*/
public class GroupProfilePODao extends AbstractDao<GroupProfilePO, Long> {

    public static final String TABLENAME = "GROUP_PROFILE_PO";

    /**
     * Properties of entity GroupProfilePO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GroupId = new Property(0, Long.class, "groupId", true, "GROUP_ID");
        public final static Property GroupType = new Property(1, Integer.class, "groupType", false, "GROUP_TYPE");
        public final static Property OwnerId = new Property(2, Long.class, "ownerId", false, "OWNER_ID");
        public final static Property GroupName = new Property(3, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Level = new Property(6, Integer.class, "level", false, "LEVEL");
        public final static Property Members = new Property(7, String.class, "members", false, "MEMBERS");
        public final static Property Location = new Property(8, String.class, "location", false, "LOCATION");
        public final static Property Privacy = new Property(9, Integer.class, "privacy", false, "PRIVACY");
        public final static Property Extend = new Property(10, String.class, "extend", false, "EXTEND");
        public final static Property CreateTime = new Property(11, Long.class, "createTime", false, "CREATE_TIME");
    };


    public GroupProfilePODao(DaoConfig config) {
        super(config);
    }
    
    public GroupProfilePODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUP_PROFILE_PO' (" + //
                "'GROUP_ID' INTEGER PRIMARY KEY ," + // 0: groupId
                "'GROUP_TYPE' INTEGER," + // 1: groupType
                "'OWNER_ID' INTEGER," + // 2: ownerId
                "'GROUP_NAME' TEXT," + // 3: groupName
                "'AVATAR' TEXT," + // 4: avatar
                "'DESCRIPTION' TEXT," + // 5: description
                "'LEVEL' INTEGER," + // 6: level
                "'MEMBERS' TEXT," + // 7: members
                "'LOCATION' TEXT," + // 8: location
                "'PRIVACY' INTEGER," + // 9: privacy
                "'EXTEND' TEXT," + // 10: extend
                "'CREATE_TIME' INTEGER);"); // 11: createTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_GROUP_PROFILE_PO_GROUP_ID ON GROUP_PROFILE_PO" +
                " (GROUP_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_PROFILE_PO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupProfilePO entity) {
        stmt.clearBindings();
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(1, groupId);
        }
 
        Integer groupType = entity.getGroupType();
        if (groupType != null) {
            stmt.bindLong(2, groupType);
        }
 
        Long ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindLong(3, ownerId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(7, level);
        }
 
        String members = entity.getMembers();
        if (members != null) {
            stmt.bindString(8, members);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        Integer privacy = entity.getPrivacy();
        if (privacy != null) {
            stmt.bindLong(10, privacy);
        }
 
        String extend = entity.getExtend();
        if (extend != null) {
            stmt.bindString(11, extend);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(12, createTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupProfilePO readEntity(Cursor cursor, int offset) {
        GroupProfilePO entity = new GroupProfilePO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // groupId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // groupType
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // ownerId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // level
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // members
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // location
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // privacy
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // extend
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // createTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupProfilePO entity, int offset) {
        entity.setGroupId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOwnerId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setGroupName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMembers(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLocation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrivacy(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setExtend(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GroupProfilePO entity, long rowId) {
        entity.setGroupId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GroupProfilePO entity) {
        if(entity != null) {
            return entity.getGroupId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
