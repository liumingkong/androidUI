package com.mico.model.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mico.model.po.PushDataPO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PUSH_DATA_PO.
*/
public class PushDataPODao extends AbstractDao<PushDataPO, Long> {

    public static final String TABLENAME = "PUSH_DATA_PO";

    /**
     * Properties of entity PushDataPO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Ctime = new Property(3, long.class, "ctime", false, "CTIME");
        public final static Property Ext = new Property(4, String.class, "ext", false, "EXT");
    };


    public PushDataPODao(DaoConfig config) {
        super(config);
    }
    
    public PushDataPODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PUSH_DATA_PO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TYPE' INTEGER," + // 1: type
                "'CONTENT' TEXT NOT NULL ," + // 2: content
                "'CTIME' INTEGER NOT NULL ," + // 3: ctime
                "'EXT' TEXT);"); // 4: ext
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PUSH_DATA_PO_CONTENT ON PUSH_DATA_PO" +
                " (CONTENT);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_PUSH_DATA_PO_CTIME ON PUSH_DATA_PO" +
                " (CTIME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PUSH_DATA_PO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PushDataPO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
        stmt.bindString(3, entity.getContent());
        stmt.bindLong(4, entity.getCtime());
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(5, ext);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PushDataPO readEntity(Cursor cursor, int offset) {
        PushDataPO entity = new PushDataPO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.getString(offset + 2), // content
            cursor.getLong(offset + 3), // ctime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ext
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PushDataPO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setContent(cursor.getString(offset + 2));
        entity.setCtime(cursor.getLong(offset + 3));
        entity.setExt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PushDataPO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PushDataPO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
