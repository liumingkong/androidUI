package com.mico.model.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mico.model.po.RelationPO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RELATION_PO.
*/
public class RelationPODao extends AbstractDao<RelationPO, Long> {

    public static final String TABLENAME = "RELATION_PO";

    /**
     * Properties of entity RelationPO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "UID");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property LastUpdate = new Property(2, long.class, "lastUpdate", false, "LAST_UPDATE");
    };


    public RelationPODao(DaoConfig config) {
        super(config);
    }
    
    public RelationPODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RELATION_PO' (" + //
                "'UID' INTEGER PRIMARY KEY ," + // 0: uid
                "'TYPE' INTEGER NOT NULL ," + // 1: type
                "'LAST_UPDATE' INTEGER NOT NULL );"); // 2: lastUpdate
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_RELATION_PO_UID ON RELATION_PO" +
                " (UID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_RELATION_PO_TYPE ON RELATION_PO" +
                " (TYPE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_RELATION_PO_LAST_UPDATE ON RELATION_PO" +
                " (LAST_UPDATE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RELATION_PO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RelationPO entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getLastUpdate());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RelationPO readEntity(Cursor cursor, int offset) {
        RelationPO entity = new RelationPO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uid
            cursor.getInt(offset + 1), // type
            cursor.getLong(offset + 2) // lastUpdate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RelationPO entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setLastUpdate(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RelationPO entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RelationPO entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
