package com.mico.model.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mico.model.po.StickerData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STICKER_DATA.
*/
public class StickerDataDao extends AbstractDao<StickerData, String> {

    public static final String TABLENAME = "STICKER_DATA";

    /**
     * Properties of entity StickerData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StickerId = new Property(0, String.class, "stickerId", true, "STICKER_ID");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Ctime = new Property(2, long.class, "ctime", false, "CTIME");
        public final static Property Ext = new Property(3, String.class, "ext", false, "EXT");
    };


    public StickerDataDao(DaoConfig config) {
        super(config);
    }
    
    public StickerDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STICKER_DATA' (" + //
                "'STICKER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: stickerId
                "'CONTENT' TEXT NOT NULL ," + // 1: content
                "'CTIME' INTEGER NOT NULL ," + // 2: ctime
                "'EXT' TEXT);"); // 3: ext
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_STICKER_DATA_STICKER_ID ON STICKER_DATA" +
                " (STICKER_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_STICKER_DATA_CTIME ON STICKER_DATA" +
                " (CTIME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STICKER_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StickerData entity) {
        stmt.clearBindings();
 
        String stickerId = entity.getStickerId();
        if (stickerId != null) {
            stmt.bindString(1, stickerId);
        }
        stmt.bindString(2, entity.getContent());
        stmt.bindLong(3, entity.getCtime());
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(4, ext);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StickerData readEntity(Cursor cursor, int offset) {
        StickerData entity = new StickerData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // stickerId
            cursor.getString(offset + 1), // content
            cursor.getLong(offset + 2), // ctime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // ext
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StickerData entity, int offset) {
        entity.setStickerId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setContent(cursor.getString(offset + 1));
        entity.setCtime(cursor.getLong(offset + 2));
        entity.setExt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(StickerData entity, long rowId) {
        return entity.getStickerId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(StickerData entity) {
        if(entity != null) {
            return entity.getStickerId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
