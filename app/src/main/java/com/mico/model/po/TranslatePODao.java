package com.mico.model.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mico.model.po.TranslatePO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRANSLATE_PO.
*/
public class TranslatePODao extends AbstractDao<TranslatePO, Long> {

    public static final String TABLENAME = "TRANSLATE_PO";

    /**
     * Properties of entity TranslatePO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TranslateIndex = new Property(1, String.class, "translateIndex", false, "TRANSLATE_INDEX");
        public final static Property OriginText = new Property(2, String.class, "originText", false, "ORIGIN_TEXT");
        public final static Property TranslateText = new Property(3, String.class, "translateText", false, "TRANSLATE_TEXT");
        public final static Property Locale = new Property(4, String.class, "locale", false, "LOCALE");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
        public final static Property Ext = new Property(6, String.class, "ext", false, "EXT");
    };


    public TranslatePODao(DaoConfig config) {
        super(config);
    }
    
    public TranslatePODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRANSLATE_PO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TRANSLATE_INDEX' TEXT NOT NULL ," + // 1: translateIndex
                "'ORIGIN_TEXT' TEXT NOT NULL ," + // 2: originText
                "'TRANSLATE_TEXT' TEXT NOT NULL ," + // 3: translateText
                "'LOCALE' TEXT NOT NULL ," + // 4: locale
                "'TYPE' INTEGER," + // 5: type
                "'EXT' TEXT);"); // 6: ext
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRANSLATE_PO_TRANSLATE_INDEX ON TRANSLATE_PO" +
                " (TRANSLATE_INDEX);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRANSLATE_PO_ORIGIN_TEXT ON TRANSLATE_PO" +
                " (ORIGIN_TEXT);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRANSLATE_PO_TRANSLATE_TEXT ON TRANSLATE_PO" +
                " (TRANSLATE_TEXT);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRANSLATE_PO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TranslatePO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTranslateIndex());
        stmt.bindString(3, entity.getOriginText());
        stmt.bindString(4, entity.getTranslateText());
        stmt.bindString(5, entity.getLocale());
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(7, ext);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TranslatePO readEntity(Cursor cursor, int offset) {
        TranslatePO entity = new TranslatePO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // translateIndex
            cursor.getString(offset + 2), // originText
            cursor.getString(offset + 3), // translateText
            cursor.getString(offset + 4), // locale
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // ext
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TranslatePO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTranslateIndex(cursor.getString(offset + 1));
        entity.setOriginText(cursor.getString(offset + 2));
        entity.setTranslateText(cursor.getString(offset + 3));
        entity.setLocale(cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setExt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TranslatePO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TranslatePO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
