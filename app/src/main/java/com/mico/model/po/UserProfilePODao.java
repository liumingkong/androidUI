package com.mico.model.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mico.model.po.UserProfilePO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_PROFILE_PO.
*/
public class UserProfilePODao extends AbstractDao<UserProfilePO, Long> {

    public static final String TABLENAME = "USER_PROFILE_PO";

    /**
     * Properties of entity UserProfilePO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "UID");
        public final static Property Gendar = new Property(1, int.class, "gendar", false, "GENDAR");
        public final static Property DisplayName = new Property(2, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property Birthday = new Property(6, Long.class, "birthday", false, "BIRTHDAY");
        public final static Property Level = new Property(7, Integer.class, "level", false, "LEVEL");
        public final static Property Extend = new Property(8, String.class, "extend", false, "EXTEND");
    };


    public UserProfilePODao(DaoConfig config) {
        super(config);
    }
    
    public UserProfilePODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_PROFILE_PO' (" + //
                "'UID' INTEGER PRIMARY KEY ," + // 0: uid
                "'GENDAR' INTEGER NOT NULL ," + // 1: gendar
                "'DISPLAY_NAME' TEXT NOT NULL ," + // 2: displayName
                "'AVATAR' TEXT," + // 3: avatar
                "'DESCRIPTION' TEXT," + // 4: description
                "'CREATE_TIME' INTEGER," + // 5: createTime
                "'BIRTHDAY' INTEGER," + // 6: birthday
                "'LEVEL' INTEGER," + // 7: level
                "'EXTEND' TEXT);"); // 8: extend
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_PROFILE_PO_UID ON USER_PROFILE_PO" +
                " (UID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_PROFILE_PO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserProfilePO entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
        stmt.bindLong(2, entity.getGendar());
        stmt.bindString(3, entity.getDisplayName());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(7, birthday);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(8, level);
        }
 
        String extend = entity.getExtend();
        if (extend != null) {
            stmt.bindString(9, extend);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserProfilePO readEntity(Cursor cursor, int offset) {
        UserProfilePO entity = new UserProfilePO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uid
            cursor.getInt(offset + 1), // gendar
            cursor.getString(offset + 2), // displayName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // birthday
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // level
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // extend
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserProfilePO entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGendar(cursor.getInt(offset + 1));
        entity.setDisplayName(cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBirthday(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setLevel(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setExtend(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserProfilePO entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserProfilePO entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
